
TODO:
	
	refactor
		utilities or graph-system

	register types
		dict + graph_node as elem
		graph_node:
			connection_type
				ONE_TO_MANY or MANY_TO_MANY
				can use this to validate add_output
			number of in/out
				start
				min/max
				
		do not use 'is Composite' in GraphEdit
			nd.has_multiple_outputs() > 1
				or nd.max_out > 1
			get_link_count(nd) < nd.max_out
	
	build BT
		save - graph-data, as BT data; dfs?
			already have BT saver just need to translate to format
		load - to graph, as BT
				
	sort out context menu
		categories
		from data
			add_type(script, name)
			
	test
		dis/connect
		reorder
		save/load

	use window/panel instead of fancy options on nodes?
		selected info
		
	tool/editor panel
		
	context menu
		differentiate between node and empty space pressed
	
	Separate to ez-graph addon
		composite
			output types - not responsibility of node... is graph
				many to many
				one to many
			
			number of in/out - child class
				start
				min/max
				
			insert slot at idx
			renumber label idx/s on add
			separate idx input/output


LATER:
	optional outputs (layers?)
		to tick
		utility
		
	strange nodes:
		viewport
		debug/inspect
	
DONE:
	simplified node functions
		set slot
		root, composite, leaf
	auto-add outputs to composite
	get outputs from a node
	reorder children on disconnect
	y sort children on drag
